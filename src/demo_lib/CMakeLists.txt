CMAKE_MINIMUM_REQUIRED(VERSION 3.6.1 FATAL_ERROR)

PROJECT(demo_lib)

FILE(GLOB HDR_DEMO_LIB ${PROJECT_SOURCE_DIR}/*.h)
AUX_SOURCE_DIRECTORY(. SRC_DEMO_LIB)
ADD_LIBRARY(${PROJECT_NAME} STATIC
	${SRC_DEMO_LIB}
	${HDR_DEMO_LIB})	#lib

#boost
IF($ENV{HOST_PLATFORM} STREQUAL PLATFORM_X86)
	IF($ENV{HOST_OS} STREQUAL OS_WINDOWS)
		#boost X86
		SET(BOOST_ROOT "$ENV{BOOST_X86_HOME}")	#ENV:BOOST_X86_HOME
		SET(Boost_USE_STATIC_LIBS ON)
		FIND_PACKAGE(Boost 1.62.0 REQUIRED COMPONENTS system regex date_time atomic chrono thread filesystem log log_setup program_options)
		IF(Boost_FOUND)
			INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
			TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${Boost_LIBRARIES})
		ELSE(Boost_FOUND)
			MESSAGE(FATAL_ERROR "Boost not found!")
		ENDIF(Boost_FOUND)
	ELSEIF($ENV{HOST_OS} STREQUAL OS_LINUX)
	ENDIF()
ELSEIF($ENV{HOST_PLATFORM} STREQUAL PLATFORM_X64)
	IF($ENV{HOST_OS} STREQUAL OS_WINDOWS)
		#boost X64
		SET(BOOST_ROOT "$ENV{BOOST_X64_HOME}")	#ENV:BOOST_X64_HOME
		SET(Boost_USE_STATIC_LIBS ON)
		FIND_PACKAGE(Boost 1.62.0 REQUIRED COMPONENTS system regex date_time atomic chrono thread filesystem log log_setup program_options)
		IF(Boost_FOUND)
			INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
			TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${Boost_LIBRARIES})
		ELSE(Boost_FOUND)
			MESSAGE(FATAL_ERROR "Boost not found!")
		ENDIF(Boost_FOUND)
	ELSEIF($ENV{HOST_OS} STREQUAL OS_LINUX)
	ENDIF()
ELSEIF($ENV{HOST_PLATFORM} STREQUAL PLATFORM_ARM)
ENDIF()